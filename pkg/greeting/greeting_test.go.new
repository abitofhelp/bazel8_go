package greeting

import (
	"context"
	"errors"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

func TestGreet(t *testing.T) {
	tests := []struct {
		name           string
		ctx            context.Context
		input          string
		winnings       uint64
		expected       string
		expectedErr    error
		setupCtx       func() (context.Context, context.CancelFunc)
		cancelCtx      bool
		cancelDelay    time.Duration
	}{
		{
			name:        "valid input",
			setupCtx:    func() (context.Context, context.CancelFunc) { return context.Background(), func() {} },
			input:       "John",
			winnings:    1234567,
			expected:    "Howdy John! You have won $12,345.67 USD!\n",
			expectedErr: nil,
		},
		{
			name:        "empty name",
			setupCtx:    func() (context.Context, context.CancelFunc) { return context.Background(), func() {} },
			input:       "",
			winnings:    1234567,
			expected:    "",
			expectedErr: ErrInvalidName,
		},
		{
			name:        "zero winnings",
			setupCtx:    func() (context.Context, context.CancelFunc) { return context.Background(), func() {} },
			input:       "John",
			winnings:    0,
			expected:    "Howdy John! You have won $0.00 USD!\n",
			expectedErr: nil,
		},
		{
			name:        "canceled context before call",
			setupCtx:    func() (context.Context, context.CancelFunc) { ctx, cancel := context.WithCancel(context.Background()); cancel(); return ctx, cancel },
			input:       "John",
			winnings:    1234567,
			expected:    "",
			expectedErr: ErrContextCanceled,
		},
		{
			name:        "context with deadline exceeded before call",
			setupCtx:    func() (context.Context, context.CancelFunc) { ctx, cancel := context.WithTimeout(context.Background(), -time.Second); return ctx, cancel },
			input:       "John",
			winnings:    1234567,
			expected:    "",
			expectedErr: ErrContextDeadlineExceeded,
		},
		{
			name:        "context canceled during processing",
			setupCtx:    func() (context.Context, context.CancelFunc) { return context.WithCancel(context.Background()) },
			input:       "John",
			winnings:    1234567,
			expected:    "",
			expectedErr: ErrContextCanceled,
			cancelCtx:   true,
			cancelDelay: 10 * time.Millisecond, // Cancel after a short delay
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctx, cancel := tt.setupCtx()
			defer cancel()

			if tt.cancelCtx {
				go func() {
					time.Sleep(tt.cancelDelay)
					cancel()
				}()
			}

			result, err := Greet(ctx, tt.input, tt.winnings)
			
			if tt.expectedErr != nil {
				assert.Error(t, err)
				assert.True(t, errors.Is(err, tt.expectedErr), "Expected error %v, got %v", tt.expectedErr, err)
			} else {
				assert.NoError(t, err)
			}
			
			assert.Equal(t, tt.expected, result)
		})
	}
}